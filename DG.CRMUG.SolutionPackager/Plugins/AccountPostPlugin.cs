// <copyright file="AccountPostPlugin.cs" company="">
// Copyright (c) 2014 All Rights Reserved
// </copyright>
// <author></author>
// <date>7/7/2014 2:54:45 PM</date>
// <summary>Implements the AccountPostPlugin Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace DG.CRMUG.SolutionPackager.Plugins
{
  using System;
  using Microsoft.Xrm.Sdk;

  using DG.XrmFramework.BusinessDomain.ServiceContext;

  /// <summary>
  /// AccountPostPlugin Plugin.
  /// </summary>    
  public class AccountPostPlugin : Plugin
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="AccountPostPlugin"/> class.
    /// </summary>
    public AccountPostPlugin()
        : base(typeof(AccountPostPlugin))
    {

      RegisterPluginStep<AnyEntity>(
          EventOperation.Associate,
          ExecutionStage.PostOperation,
          ExecuteAccountPostPlugin);

      RegisterPluginStep<AnyEntity>(
          EventOperation.Disassociate,
          ExecutionStage.PostOperation,
          ExecuteAccountPostPlugin);

      RegisterPluginStep<Account>(
          EventOperation.Update,
          ExecutionStage.PostOperation,
          ExecuteAccountPostPlugin);
    }

    /// <summary>
    /// Executes the plug-in.
    /// </summary>
    /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
    /// <see cref="IPluginExecutionContext"/>,
    /// <see cref="IOrganizationService"/>
    /// and <see cref="ITracingService"/>
    /// </param>
    /// <remarks>
    /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
    /// The plug-in's Execute method should be written to be stateless as the constructor
    /// is not called for every invocation of the plug-in. Also, multiple system threads
    /// could execute the plug-in at the same time. All per invocation state information
    /// is stored in the context. This means that you should not use global variables in plug-ins.
    /// </remarks>
    protected void ExecuteAccountPostPlugin(LocalPluginContext localContext)
    {
      if (localContext == null)
      {
        throw new ArgumentNullException("localContext");
      }

      var eventOperation = localContext.PluginExecutionContext
                                       .MessageName
                                       .ToEventOperation();

      var isUpdate = eventOperation.HasFlag(EventOperation.Update);

      if (eventOperation.HasFlag(EventOperation.Associate) ||
          eventOperation.HasFlag(EventOperation.Disassociate))
      {
        try
        {
#if DEBUG
          throw new Exception("Debug code shouldn't go to TEST/PROD");
#endif
        }
        catch (Exception ex)
        {
          throw new InvalidPluginExecutionException("Error: " + ex.Message);
        }
      }

      if (eventOperation.HasFlag(EventOperation.Update))
      {
        try
        {
#if DEBUG
          throw new Exception("Debug code shouldn't go to TEST/PROD");
#endif
        }
        catch (Exception ex)
        {
          throw new InvalidPluginExecutionException("Error: " + ex.Message);
        }
      }
    }
  }
}
